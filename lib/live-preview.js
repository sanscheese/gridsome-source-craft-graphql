// const { parse, print } = require('gridsome/graphql')
const { existsSync, copyFile, mkdir } = require('fs')
var replace = require('replace')

const capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1)

module.exports = (api, options) => {
  api.createPages(async ({ graphql }) => {
    const fieldName = options.fieldName
    // Query our local GraphQL schema to get all sections
    const { data: sectionsQuery } = await graphql(`
        query {
          ${fieldName} {
            entries {
              typeHandle
              sectionHandle
            }
          }
        }
      `)

    // Get array of sectionHandles & typeHandles
    const entries = sectionsQuery.craft.entries

    // Remove duplicates
    const sectionsAndTypes = entries.filter(
      (item, index) => entries
        .findIndex(obj => obj.sectionHandle === item.sectionHandle && obj.typeHandle === item.typeHandle) === index)

    // Loop over each section and type
    await Promise.all(
      sectionsAndTypes.map(async ({ sectionHandle, typeHandle }) => {
        const templatePath = `./src/templates/${fieldName}Entry${capitalizeFirstLetter(sectionHandle)}${capitalizeFirstLetter(typeHandle)}.vue`
        const templateExists = existsSync(templatePath)

        // Skip if there's no template
        if (!templateExists) return false

        if (options.livePreview) {
          // Create a dynamic preview based off the template to fallback too
          // Copy the template to the pages directory
          const previewTemplatePath = `./src/pages/${sectionHandle}/[CraftPreviewSlug].vue`
          mkdir(`./src/pages/${sectionHandle}/`, { recursive: true }, (err) => {
            if (err) throw err
          })
          copyFile(templatePath, previewTemplatePath, (err) => {
            if (err) throw err
          })
          replace({
            regex: '<template>',
            replacement: `<template>\n\n<!-- I HAVE BEEN AUTOGENERATED FOR CRAFT LIVE PREVIEW DON'T EDIT ME -->\n\n  <div v-if="$page && $page.${fieldName} && $page.${fieldName}.entries">`,
            paths: [previewTemplatePath],
            recursive: true,
            silent: true
          })
          replace({
            regex: /<\/template>(?![\s\S]*<\/template>[\s\S]*$)/i, //last </template>
            replacement: `  </div>\n</template>`,
            paths: [previewTemplatePath],
            recursive: true,
            silent: true
          })
        }
      })
    )
  })

  api._app.pages.hooks.pageContext.tap('CraftLivePreview', (data, { pageQuery, queryVariables }) => {
    if (!pageQuery) return

    // @TODO - use document instead
    // const document = parse(pageQuery)
    // // modify the document

    const fieldRegex = new RegExp(`{ ${options.fieldName} {`, 'gi')
    const typeRegex = new RegExp(`on ${options.typeName}_`, 'gi')
    const variableRegex = new RegExp(`\\[${options.typeName}_`, 'gi')

    const craftQuery = pageQuery
      .replace(/(\r\n|\n|\r)/gm, '')
      .replace(/ {1,}/g, ' ') // use single spaces
      .replace(fieldRegex, '{')
      .slice(0, -1) // remove trailing "}"
      .replace(typeRegex, 'on ') // remove type prefix "on craft_"
      .replace(variableRegex, '\[')

    data.craftQuery = craftQuery // print(document)

    // Authorization headers
    if (options.livePreview === 'dangerouslyAllowAuthorizationHeaders') data.craftQueryHeaders = options.headers || null  

    // May not need these
    data.craftQueryVariables = queryVariables
  })
}
